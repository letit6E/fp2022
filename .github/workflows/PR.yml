name: Build PR

on:
  pull_request:
    branches:
      - 'master'
env:
  OPAMROOT: /home/user/.opam
  OPAMYES: true
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest

    runs-on: ${{ matrix.os }}
    container:
      image: kakadu18/ocaml:fp2022

    steps:

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      #- run: sudo apt-get update -y
      #  if: matrix.os != 'macos-latest'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0                # fix me later

      - run: opam pin add https://github.com/Kakadu/mylinter.git --no-action
      - name: Installing a linter
        run: opam install zanuda --yes

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - name: Get Ref brach name
        run: |
          echo "${{ steps.branch-name.outputs.ref_branch }}"

      #- run: git remote -vvv
      #- run: git branch -vvv

        #  Outputs: "main"
      ############# Detecting and compiling fp2022
      # Smart link about setting environment variables
      # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
      - run: |
          sh -x ./detect_latest_pr.sh "pull/${{ steps.branch-name.outputs.ref_branch }}" >> $GITHUB_ENV
          echo "${{ env.latest }}"

      - name: Installing dependencies
        run: cd ${{ env.latest }} && opam install . --deps-only --with-test --with-doc

      - name: Naive linting
        run: |
          cd ${{ env.latest }} && python3 ../lint_filesystem.py ${{ env.latest }}

      - name: Checking ocamlformat
        run: |
          cd ${{ env.latest }} && opam exec -- dune build @fmt --profile=release

      - name: Compiling ${{ env.latest }}...
        run: cd ${{ env.latest }} && opam exec -- dune build --profile=release

      - name: Running tests in ${{ env.latest }}...
        run: cd ${{ env.latest }} && opam exec -- dune runtest --profile=release

      - name: Build API documentation for ${{ env.latest }}...
        run: |
          opam install odoc --yes
          cd ${{ env.latest }} && opam exec -- dune build @doc --profile=release

      - name: Setting the environment
        env:
          LINTS_PATH: _build/default/_found_lints
        run: |
          echo "RDJSON_DIR_PATH=${{ env.LINTS_PATH }}" >> $GITHUB_ENV
          echo "RDJSON_FILE_PATH=${{ env.LINTS_PATH }}/lints.rdjsonl" >> $GITHUB_ENV
          cd ${{ env.latest }} && mkdir -p ${{ env.LINTS_PATH }}
          echo "ZANUDA_REPORT_FILE_PATH=${{ env.LINTS_PATH }}/lints.txt" >> $GITHUB_ENV

      - name: Running linter in ${{ env.latest }}...
        run: |
          cd ${{ env.latest }} && opam exec -- zanuda -dir . -add-prefix ${{ env.latest }}/ -ordjsonl ${{ env.RDJSON_FILE_PATH }} > ${{ env.ZANUDA_REPORT_FILE_PATH }}

      - run: cat ${{ env.latest }}/${{ env.RDJSON_FILE_PATH }}
      - name: Preparing lints tarball
        run: |
          echo ${{ env.latest }} > ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/projectname.txt
          echo ${{ github.event.pull_request.user.login }} > ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/piarast.txt
          echo ${{ github.event.number }} > ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/PR_number.txt
          echo ${{ github.event.pull_request.head.sha }} > ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/CI_COMMIT.txt
      # we use commit previous from head because HEAD is merge commit by some reason
      # TODO: maybe PR_number is not required

      - run: echo $(git rev-parse HEAD)
      - run: echo $(git rev-parse HEAD~1)
      - run: echo ${{ github.event.pull_request.head.sha }}
      - run: PAGER= git log

      - uses: actions/upload-artifact@v3
        with:
          name: other_stuff
          path: |
            ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}

      - uses: actions/upload-artifact@v3
        with:
          name: docs
          path: |
            ${{ env.latest }}/_build/default/_doc/_html
            ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/projectname.txt
            ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/PR_number.txt
          #${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/CI_COMMIT.txt

      - name: Installing a clone detector
        run: npm install jscpd

      - name: Looking for clones
        run: |
          python3 ./find_clones.py ${{ env.latest }}
          #python3 -m trace --trace ./find_clones.py ${{ env.latest }}

      - run: echo ${{ github.event.number }} > PR_number.txt

      - run: cat jscpd_report.txt

      - uses: actions/upload-artifact@v2
        with:
          name: jscpd_report
          path: |
            jscpd_report.txt
            PR_number.txt
            .github/jscpd.template.md
